package main

var headerTpl = `package {{.Package}}

// Code generated by shiftgen at {{.GenSource}}. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"strings"
	"time"
	"github.com/luno/jettison/errors"
	"github.com/luno/jettison/j"
	"github.com/luno/shift"
)
`

var updaterTpl = `
// Update updates the status of a {{.Table}} table entity. All the fields of the
// {{.Type}} receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 {{.Type}}) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update {{.Table}} set {{col .StatusField}}=?, {{col "updated_at"}}=? ")
	args = append(args, to.ShiftStatus(), time.Now())
{{range .Fields}}
	q.WriteString(", {{col .Col}}=?")
	args = append(args, 一.{{.Name}})
{{end}}
	q.WriteString(" where {{col "id"}}=? and {{col .StatusField}}=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.Wrap(shift.ErrRowCount, "{{.Type}}", j.KV("count", n))
	}

	return 一.ID, nil
}
`

var inserterTpl = `
// Insert inserts a new {{.Table}} table entity. All the fields of the 
// {{.Type}} receiver are set, as well as status, created_at and updated_at. 
// The newly created entity id is returned on success or an error.
func (一 {{.Type}}) Insert(ctx context.Context, tx *sql.Tx,st shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("insert into {{.Table}} set {{col .StatusField}}=?, {{col "created_at"}}=?, {{col "updated_at"}}=? ")
	args = append(args, st.ShiftStatus(), time.Now(), time.Now())
{{range .Fields}}
	q.WriteString(", {{col .Col}}=?")
	args = append(args, 一.{{.Name}})
{{end}}
	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}
`
